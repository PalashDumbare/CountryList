// Generated by Dagger (https://dagger.dev).
package com.example.cities.data.repository;

import com.example.cities.data.network.CityService;
import com.example.cities.data.sharedPref.Prefferences;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CityRepository_Factory implements Factory<CityRepository> {
  private final Provider<CityService> cityServiceProvider;

  private final Provider<Prefferences> sharedPreferencesProvider;

  public CityRepository_Factory(Provider<CityService> cityServiceProvider,
      Provider<Prefferences> sharedPreferencesProvider) {
    this.cityServiceProvider = cityServiceProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public CityRepository get() {
    return newInstance(cityServiceProvider.get(), sharedPreferencesProvider.get());
  }

  public static CityRepository_Factory create(Provider<CityService> cityServiceProvider,
      Provider<Prefferences> sharedPreferencesProvider) {
    return new CityRepository_Factory(cityServiceProvider, sharedPreferencesProvider);
  }

  public static CityRepository newInstance(CityService cityService,
      Prefferences sharedPreferences) {
    return new CityRepository(cityService, sharedPreferences);
  }
}
