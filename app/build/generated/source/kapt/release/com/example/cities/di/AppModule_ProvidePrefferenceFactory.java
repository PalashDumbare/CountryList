// Generated by Dagger (https://dagger.dev).
package com.example.cities.di;

import android.content.SharedPreferences;
import com.example.cities.data.sharedPref.Prefferences;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidePrefferenceFactory implements Factory<Prefferences> {
  private final AppModule module;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  public AppModule_ProvidePrefferenceFactory(AppModule module,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    this.module = module;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public Prefferences get() {
    return providePrefference(module, sharedPreferencesProvider.get());
  }

  public static AppModule_ProvidePrefferenceFactory create(AppModule module,
      Provider<SharedPreferences> sharedPreferencesProvider) {
    return new AppModule_ProvidePrefferenceFactory(module, sharedPreferencesProvider);
  }

  public static Prefferences providePrefference(AppModule instance,
      SharedPreferences sharedPreferences) {
    return Preconditions.checkNotNull(instance.providePrefference(sharedPreferences), "Cannot return null from a non-@Nullable @Provides method");
  }
}
