// Generated by Dagger (https://dagger.dev).
package com.example.cities.data.repository;

import com.example.cities.data.network.CountryService;
import com.example.cities.data.sharedPref.Prefferences;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CountryRepository_Factory implements Factory<CountryRepository> {
  private final Provider<CountryService> countryServiceProvider;

  private final Provider<Prefferences> sharedPreferencesProvider;

  public CountryRepository_Factory(Provider<CountryService> countryServiceProvider,
      Provider<Prefferences> sharedPreferencesProvider) {
    this.countryServiceProvider = countryServiceProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
  }

  @Override
  public CountryRepository get() {
    return newInstance(countryServiceProvider.get(), sharedPreferencesProvider.get());
  }

  public static CountryRepository_Factory create(Provider<CountryService> countryServiceProvider,
      Provider<Prefferences> sharedPreferencesProvider) {
    return new CountryRepository_Factory(countryServiceProvider, sharedPreferencesProvider);
  }

  public static CountryRepository newInstance(CountryService countryService,
      Prefferences sharedPreferences) {
    return new CountryRepository(countryService, sharedPreferences);
  }
}
